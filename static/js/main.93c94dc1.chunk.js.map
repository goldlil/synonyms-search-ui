{"version":3,"sources":["api/SynonymsSearchApi.js","components/SearcSynonymsComponent.js","components/AddNewSynonymsComponent.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","process","REACT_APP_STAGE","addSynonyms","addSynonymsBody","url","axios","post","searchSynonyms","word","depth","get","Search","Input","SearchSynonymsComponent","props","state","visible","searchResults","query","synonymsApi","then","response","setState","data","catch","err","console","error","message","className","style","display","this","justify","paddingTop","xs","sm","md","lg","placeholder","onSearch","bind","enterButton","size","dataSource","renderItem","item","Item","nextProps","prevState","React","Component","TextArea","AddNewSynonymsComponent","wordPattern","splitPattern","values","log","synonymsArray","synonyms","match","length","Promise","resolve","synonym","trim","success","rule","value","test","reject","layout","onFinish","onFinishFailed","label","name","rules","required","max","validator","validatorForSynonyms","autoSize","minRows","maxRows","type","htmlType","App","searchSynonymsVisible","addNewSynonymsVisible","e","key","mode","onClick","handleMenuClick","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAEIA,E,kKAGAA,EAD4B,UAAhCC,sIAAYC,gBACE,wBACA,4CAEC,OACbC,YAAa,SAASC,GACpB,IAAIC,EAAG,UAAML,EAAN,iBACP,OAAOM,IAAMC,KAAKF,EAAKD,IAEzBI,eAAgB,SAASC,EAAMC,GAC3B,IAAIL,EAAG,UAAML,EAAN,iCAAsCS,GAI7C,OAHY,MAATC,IACCL,GAAG,iBAAcK,IAEdJ,IAAMK,IAAIN,KCffO,EAAWC,IAAXD,OA2DOE,E,YAtDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,EAAKF,MAAME,QACpBC,cAAe,IAJJ,E,4EAcJC,GAAQ,IAAD,OAClBC,EAAYZ,eAAeW,EAAO,MACjCE,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVL,cAAeI,EAASE,UAG/BC,OAAM,SAAAC,GACHC,QAAQC,MAAMF,GACdG,IAAQD,MAAM,mD,+BAKlB,OACI,yBAAKE,UAAU,MAAMC,MAAO,CAAEC,QAASC,KAAKjB,MAAMC,QAAU,QAAU,SAClE,kBAAC,IAAD,CAAKiB,QAAQ,SAASH,MAAO,CAAEI,WAAY,QACvC,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC7B,+DAGR,kBAAC,IAAD,CAAKL,QAAQ,SAASH,MAAO,CAAEI,WAAY,QACvC,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC7B,kBAAC3B,EAAD,CAAQ4B,YAAY,eAAeC,SAAUR,KAAKzB,eAAekC,KAAKT,MAAOU,aAAW,MAGhG,kBAAC,IAAD,CAAKT,QAAQ,SAASH,MAAO,CAAEI,WAAY,QACvC,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC7B,kBAAC,IAAD,CACIK,KAAK,QACLC,WAAYZ,KAAKjB,MAAME,cACvB4B,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,KAAYD,Y,gDArCxBE,EAAWC,GACvC,MAAO,CACHjC,QAASgC,EAAUhC,a,GAZOkC,IAAMC,W,kBCFpCC,EAAaxC,IAAbwC,SAwHOC,E,YAnHX,WAAYvC,GAAQ,IAAD,8BACf,4CAAMA,KAYVwC,YAAc,cAbK,EAenBC,aAAe,YAbX,EAAKxC,MAAQ,CACTC,QAAS,EAAKF,MAAME,SAHT,E,sEAiBVwC,GACL9B,QAAQ+B,IAAID,GACZ,IAAIE,EAAgBF,EAAOG,SAASC,MAAM5B,KAAKuB,cAE/C,GAAqB,MAAjBG,GAAkD,IAAzBA,EAAcG,OACvC,OAAOC,QAAQC,UALN,2BAOb,YAAoBL,EAApB,oDAASM,EAAT,QACIA,EAASA,EAAQC,QARR,kFAUbvC,QAAQ+B,IAAIC,GAEZhC,QAAQ+B,IAAItC,GAGZA,EAAYjB,YAAY,CACpBM,KAAMgD,EAAOhD,KACbmD,SAAUD,IAEbtC,MAAK,WACFQ,IAAQsC,QAAQ,mCAEnB1C,OAAM,SAACC,GACJC,QAAQC,MAAMF,GACdG,IAAQD,MAAM,4D,qCAIPA,GACXD,QAAQ+B,IAAI,UAAW9B,GACvBC,IAAQD,MAAM,6BAA8B,K,2CAG3BwC,EAAMC,GACvB,GAAa,MAATA,EAAe,OAAON,QAAQC,UAClC,IAAIL,EAAgBU,EAAMR,MAAM5B,KAAKuB,cAErC,GAAqB,MAAjBG,GAAkD,IAAzBA,EAAcG,OACvC,OAAOC,QAAQC,UALW,2BAO9B,YAAoBL,EAApB,+CAAmC,CAAC,IAA3BM,EAA0B,QAE/B,GADAtC,QAAQ+B,IAAIO,EAAQC,SACfjC,KAAKsB,YAAYe,KAAKL,EAAQC,QAC/B,OAAOH,QAAQQ,OAAO,yDAVA,kFAY9B,OAAOR,QAAQC,Y,+BAKf,OACI,yBAAKlC,UAAU,MAAMC,MAAO,CAAEC,QAASC,KAAKjB,MAAMC,QAAU,QAAU,SAClE,kBAAC,IAAD,CAAKiB,QAAQ,SAASH,MAAO,CAAEI,WAAY,QACvC,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC7B,kBAAC,IAAD,CACIiC,OAAO,WACPC,SAAUxC,KAAKwC,SAAS/B,KAAKT,MAC7ByC,eAAgBzC,KAAKyC,gBAErB,kBAAC,IAAK1B,KAAN,CACI2B,MAAM,gBACNC,KAAK,OACLC,MACI,CACI,CAAEC,UAAU,EAAMjD,QAAS,wBAC3B,CAAEkD,IAAK,GAAIlD,QAAS,yCAG5B,kBAAC,IAAD,CAAOW,YAAY,kBAEvB,kBAAC,IAAKQ,KAAN,CACI2B,MAAM,YACNC,KAAK,WACLC,MACI,CACI,CAAEC,UAAU,EAAMjD,QAAS,0BAC3B,CAAEmD,UAAW/C,KAAKgD,qBAAqBvC,KAAKT,SAGpD,kBAACoB,EAAD,CACIb,YAAY,uBACZ0C,SAAU,CAAEC,QAAS,EAAGC,QAAS,OAGzC,kBAAC,IAAKpC,KAAN,KACI,kBAAC,IAAD,CAAQqC,KAAK,UAAUC,SAAS,UAAhC,wB,gDA/FIrC,EAAWC,GACvC,MAAO,CACHjC,QAASgC,EAAUhC,a,GAXOkC,IAAMC,WCwC7BmC,E,YAtCb,WAAYxE,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXwE,uBAAuB,EACvBC,uBAAuB,GAJR,E,6EAQHC,GACd/D,QAAQ+B,IAAI,SAAUgC,GACtBzD,KAAKV,SAAS,CACZiE,sBAAiC,mBAAVE,EAAEC,IACzBF,sBAAiC,gBAAVC,EAAEC,MAE3BhE,QAAQ+B,IAAIzB,KAAKjB,S,+BAIjB,OACE,yBAAKc,UAAU,OACb,kBAAC,IAAD,CAAKI,QAAQ,UACX,kBAAC,IAAD,CAAM0D,KAAK,aAAaC,QAAS5D,KAAK6D,gBAAgBpD,KAAKT,OACzD,kBAAC,IAAKe,KAAN,CAAW2C,IAAI,kBAAf,mBAGA,kBAAC,IAAK3C,KAAN,CAAW2C,IAAI,eAAf,kBAKJ,kBAAC,EAAD,CAAgB1E,QAAWgB,KAAKjB,MAAMwE,wBACtC,kBAAC,EAAD,CAAgBvE,QAAWgB,KAAKjB,MAAMyE,6B,GAjC5BtC,IAAMC,WCKJ2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrC,MACvB,2DCZNsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpF,MAAK,SAAAqF,GACJA,EAAaC,gBAEdlF,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMC,c","file":"static/js/main.93c94dc1.chunk.js","sourcesContent":["import axios from 'axios'\n\nlet API_URL;\n\nprocess.env.REACT_APP_STAGE === 'local'\n  ? API_URL = 'http://localhost:8080'\n  : API_URL = 'https://synonyms-search-api.herokuapp.com'\n\nexport default {\n  addSynonyms: function(addSynonymsBody) {\n    let url = `${API_URL}/synonyms/add`;\n    return axios.post(url, addSynonymsBody);\n  },\n  searchSynonyms: function(word, depth) {\n      let url = `${API_URL}/synonyms/search?word=${word}`;\n      if(depth != null) {\n          url += `&depth=${depth}`;\n      }\n      return axios.get(url);\n  }\n}","import React from 'react';\nimport { Input, Row, Col, List, message } from 'antd';\nimport synonymsApi from '../api/SynonymsSearchApi'\nconst { Search } = Input;\n\n\nclass SearchSynonymsComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: this.props.visible,\n            searchResults: []\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        return {\n            visible: nextProps.visible,\n        };\n    }\n\n    searchSynonyms(query) {\n        synonymsApi.searchSynonyms(query, null)\n        .then(response => {\n            this.setState({\n                searchResults: response.data\n            });\n        })\n        .catch(err => {\n            console.error(err);\n            message.error(\"Unexpected problem occurred during search!\")\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\" style={{ display: this.state.visible ? 'block' : 'none' }}>\n                <Row justify=\"center\" style={{ paddingTop: \"6em\" }}>\n                    <Col xs={22} sm={14} md={10} lg={8} >\n                        <p>Enter word for synonyms search</p>\n                    </Col>\n                </Row>\n                <Row justify=\"center\" style={{ paddingTop: \"1em\" }}>\n                    <Col xs={22} sm={14} md={10} lg={8} >\n                        <Search placeholder=\"Enter a word\" onSearch={this.searchSynonyms.bind(this)} enterButton />\n                    </Col>\n                </Row>\n                <Row justify=\"center\" style={{ paddingTop: \"1em\" }}>\n                    <Col xs={22} sm={14} md={10} lg={8} >\n                        <List\n                            size=\"small\"\n                            dataSource={this.state.searchResults}\n                            renderItem={item => <List.Item>{item}</List.Item>}\n                        />\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default SearchSynonymsComponent;\n","import React from 'react';\nimport { Form, Input, Button, Row, Col, message } from 'antd'\nimport synonymsApi from '../api/SynonymsSearchApi'\n\nconst { TextArea } = Input;\n\n\nclass AddNewSynonymsComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: this.props.visible\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        return {\n            visible: nextProps.visible,\n        };\n    }\n\n    wordPattern = /^[a-zA-Z]+$/;\n\n    splitPattern = /[^\\r\\n]+/g;\n\n    onFinish(values) {\n        console.log(values);       \n        let synonymsArray = values.synonyms.match(this.splitPattern);\n\n        if (synonymsArray == null || synonymsArray.length === 0)\n            return Promise.resolve();\n\n        for (let synonym of synonymsArray)\n            synonym =synonym.trim();\n\n        console.log(synonymsArray); \n        \n        console.log(synonymsApi);\n\n        \n        synonymsApi.addSynonyms({\n            word: values.word,\n            synonyms: synonymsArray\n        })\n        .then(() => {\n            message.success(\"Synonyms successfully added!\");\n        })\n        .catch((err) => {\n            console.error(err);\n            message.error(\"Unexpected problem occurred during adding synonyms!\");\n        });\n    }\n\n    onFinishFailed(error) {\n        console.log(\"error: \", error);\n        message.error('Please fill form correcly!', 1);\n    }\n\n    validatorForSynonyms(rule, value) {\n        if (value == null) return Promise.resolve();\n        let synonymsArray = value.match(this.splitPattern);\n\n        if (synonymsArray == null || synonymsArray.length === 0)\n            return Promise.resolve();\n\n        for (let synonym of synonymsArray) {\n            console.log(synonym.trim());\n            if (!this.wordPattern.test(synonym.trim()))\n                return Promise.reject('Words can only include letters of english alphabeth!');\n        }\n        return Promise.resolve();\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\" style={{ display: this.state.visible ? 'block' : 'none' }}>\n                <Row justify=\"center\" style={{ paddingTop: \"6em\" }}>\n                    <Col xs={22} sm={14} md={10} lg={8} >\n                        <Form\n                            layout=\"vertical\"\n                            onFinish={this.onFinish.bind(this)}\n                            onFinishFailed={this.onFinishFailed}\n                        >\n                            <Form.Item\n                                label=\"Enter a word:\"\n                                name=\"word\"\n                                rules={\n                                    [\n                                        { required: true, message: 'Please input a word!' },\n                                        { max: 30, message: \"Max length of word is 30 characters\" }\n                                    ]}\n                            >\n                                <Input placeholder=\"Enter a word\" />\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Synonyms:\"\n                                name=\"synonyms\"\n                                rules={\n                                    [\n                                        { required: true, message: 'Please input synonyms!' },\n                                        { validator: this.validatorForSynonyms.bind(this) }\n                                    ]}\n                            >\n                                <TextArea\n                                    placeholder=\"One synonym per line\"\n                                    autoSize={{ minRows: 3, maxRows: 10 }}\n                                />\n                            </Form.Item>\n                            <Form.Item>\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Add synonyms\n                            </Button>\n                            </Form.Item>\n                        </Form>\n                    </Col>\n                </Row>\n            </div>\n\n        )\n    }\n}\n\nexport default AddNewSynonymsComponent;\n","import React from 'react';\nimport './App.css';\nimport {Row, Menu} from 'antd';\nimport SearchSynonyms from './components/SearcSynonymsComponent';\nimport AddNewSynonyms from './components/AddNewSynonymsComponent.js'\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchSynonymsVisible: true,\n      addNewSynonymsVisible: false,\n    }\n  }\n\n  handleMenuClick(e) {\n    console.log('click ', e);\n    this.setState({\n      searchSynonymsVisible: e.key === \"searchSynonyms\" ? true : false,\n      addNewSynonymsVisible: e.key === \"addSynonyms\" ? true : false\n    })\n    console.log(this.state)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Row justify=\"center\">\n          <Menu mode=\"horizontal\" onClick={this.handleMenuClick.bind(this)}>\n            <Menu.Item key=\"searchSynonyms\">\n              Search synonyms\n        </Menu.Item>\n            <Menu.Item key=\"addSynonyms\">\n              Add synonyms\n        </Menu.Item>\n          </Menu>\n        </Row>\n        <SearchSynonyms visible = {this.state.searchSynonymsVisible} />\n        <AddNewSynonyms visible = {this.state.addNewSynonymsVisible}/>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}